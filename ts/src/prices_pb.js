/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.main.PriceEntries', null, global);
goog.exportSymbol('proto.main.PricesRequest', null, global);
goog.exportSymbol('proto.main.PricesResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.PricesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.PricesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.PricesRequest.displayName = 'proto.main.PricesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.PricesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.main.PricesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.PricesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.PricesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    exchange: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shortCode: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.PricesRequest}
 */
proto.main.PricesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.PricesRequest;
  return proto.main.PricesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.PricesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.PricesRequest}
 */
proto.main.PricesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchange(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.PricesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.PricesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.PricesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.PricesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExchange();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShortCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string exchange = 1;
 * @return {string}
 */
proto.main.PricesRequest.prototype.getExchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.main.PricesRequest.prototype.setExchange = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string short_code = 2;
 * @return {string}
 */
proto.main.PricesRequest.prototype.getShortCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.main.PricesRequest.prototype.setShortCode = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.PriceEntries = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.main.PriceEntries.repeatedFields_, null);
};
goog.inherits(proto.main.PriceEntries, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.PriceEntries.displayName = 'proto.main.PriceEntries';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.main.PriceEntries.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.PriceEntries.prototype.toObject = function(opt_includeInstance) {
  return proto.main.PriceEntries.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.PriceEntries} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.PriceEntries.toObject = function(includeInstance, msg) {
  var f, obj = {
    unixTimestampList: jspb.Message.getField(msg, 1),
    volumeList: jspb.Message.getField(msg, 2),
    valueList: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.PriceEntries}
 */
proto.main.PriceEntries.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.PriceEntries;
  return proto.main.PriceEntries.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.PriceEntries} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.PriceEntries}
 */
proto.main.PriceEntries.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setUnixTimestampList(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setVolumeList(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setValueList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.PriceEntries.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.PriceEntries.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.PriceEntries} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.PriceEntries.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnixTimestampList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
  f = message.getVolumeList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
  f = message.getValueList();
  if (f.length > 0) {
    writer.writePackedInt64(
      3,
      f
    );
  }
};


/**
 * repeated int64 unix_timestamp = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.main.PriceEntries.prototype.getUnixTimestampList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.main.PriceEntries.prototype.setUnixTimestampList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.main.PriceEntries.prototype.addUnixTimestamp = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.main.PriceEntries.prototype.clearUnixTimestampList = function() {
  this.setUnixTimestampList([]);
};


/**
 * repeated int64 volume = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.main.PriceEntries.prototype.getVolumeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<number>} value */
proto.main.PriceEntries.prototype.setVolumeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.main.PriceEntries.prototype.addVolume = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.main.PriceEntries.prototype.clearVolumeList = function() {
  this.setVolumeList([]);
};


/**
 * repeated int64 value = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.main.PriceEntries.prototype.getValueList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<number>} value */
proto.main.PriceEntries.prototype.setValueList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.main.PriceEntries.prototype.addValue = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.main.PriceEntries.prototype.clearValueList = function() {
  this.setValueList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.PricesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.PricesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.PricesResponse.displayName = 'proto.main.PricesResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.PricesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.main.PricesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.PricesResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.PricesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    exchange: jspb.Message.getFieldWithDefault(msg, 1, ""),
    marketOpenMin: jspb.Message.getFieldWithDefault(msg, 2, 0),
    marketCloseMin: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timezoneOffsetMin: jspb.Message.getFieldWithDefault(msg, 4, 0),
    priceIntevalSec: jspb.Message.getFieldWithDefault(msg, 5, 0),
    priceEntries: (f = msg.getPriceEntries()) && proto.main.PriceEntries.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.PricesResponse}
 */
proto.main.PricesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.PricesResponse;
  return proto.main.PricesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.PricesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.PricesResponse}
 */
proto.main.PricesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchange(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMarketOpenMin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMarketCloseMin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimezoneOffsetMin(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPriceIntevalSec(value);
      break;
    case 6:
      var value = new proto.main.PriceEntries;
      reader.readMessage(value,proto.main.PriceEntries.deserializeBinaryFromReader);
      msg.setPriceEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.PricesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.main.PricesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.main.PricesResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.PricesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExchange();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarketOpenMin();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMarketCloseMin();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTimezoneOffsetMin();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPriceIntevalSec();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPriceEntries();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.main.PriceEntries.serializeBinaryToWriter
    );
  }
};


/**
 * optional string exchange = 1;
 * @return {string}
 */
proto.main.PricesResponse.prototype.getExchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.main.PricesResponse.prototype.setExchange = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 market_open_min = 2;
 * @return {number}
 */
proto.main.PricesResponse.prototype.getMarketOpenMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.main.PricesResponse.prototype.setMarketOpenMin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 market_close_min = 3;
 * @return {number}
 */
proto.main.PricesResponse.prototype.getMarketCloseMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.main.PricesResponse.prototype.setMarketCloseMin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 timezone_offset_min = 4;
 * @return {number}
 */
proto.main.PricesResponse.prototype.getTimezoneOffsetMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.main.PricesResponse.prototype.setTimezoneOffsetMin = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 price_inteval_sec = 5;
 * @return {number}
 */
proto.main.PricesResponse.prototype.getPriceIntevalSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.main.PricesResponse.prototype.setPriceIntevalSec = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional PriceEntries price_entries = 6;
 * @return {?proto.main.PriceEntries}
 */
proto.main.PricesResponse.prototype.getPriceEntries = function() {
  return /** @type{?proto.main.PriceEntries} */ (
    jspb.Message.getWrapperField(this, proto.main.PriceEntries, 6));
};


/** @param {?proto.main.PriceEntries|undefined} value */
proto.main.PricesResponse.prototype.setPriceEntries = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.main.PricesResponse.prototype.clearPriceEntries = function() {
  this.setPriceEntries(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.main.PricesResponse.prototype.hasPriceEntries = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.main);
